import asyncio
import json
import uuid
from nats.aio.client import Client as NATS

NATS_URL = "nats://localhost:4222"  # –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –≤ Docker, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: nats://nats:4222
SUBJECT_IN = "summaries.process"
SUBJECT_INTERMEDIATE = "summaries.intermediate"
SUBJECT_FINAL = "summaries.final"

async def main():
    nc = NATS()
    await nc.connect(servers=[NATS_URL])

    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
    async def intermediate_handler(msg):
        data = json.loads(msg.data.decode())
        print("üìå Intermediate summary:", json.dumps(data, ensure_ascii=False, indent=2))

    await nc.subscribe(SUBJECT_INTERMEDIATE, cb=intermediate_handler)

    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
    async def final_handler(msg):
        data = json.loads(msg.data.decode())
        print("‚úÖ Final summary:", json.dumps(data, ensure_ascii=False, indent=2))

    await nc.subscribe(SUBJECT_FINAL, cb=final_handler)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º file_id
    file_id = str(uuid.uuid4())

    # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    text_chunks = [
        "–ò–≤–∞–Ω: –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ù–∏–∫–æ–ª–∞–π. –•–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª. –£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.",
        "–ù–∏–∫–æ–ª–∞–π: –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ò–≤–∞–Ω. –ö–æ–Ω–µ—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞?",
        "–ò–≤–∞–Ω: –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –¢–∞–∫–∂–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º —Ü–µ—Ö–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ù–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.",
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    for idx, chunk in enumerate(text_chunks):
        msg = {
            "file_id": file_id,
            "chunk_index": idx,
            "total_chunks": len(text_chunks),
            "text": chunk
        }
        await nc.publish(SUBJECT_IN, json.dumps(msg).encode())
        await asyncio.sleep(0.1)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

    print(f"–í—Å–µ —á–∞–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, file_id={file_id}")
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ summary
    await asyncio.sleep(5)

    await nc.close()

if __name__ == "__main__":
    asyncio.run(main())
